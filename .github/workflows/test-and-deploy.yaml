# 工作流名称：显示在 GitHub Actions 界面，用于标识该流程的核心目的
name: Test and deploy

# 触发条件：当代码推送到 master 分支时自动执行此工作流
on:
  push:
    branches:
      - master  # 仅监听 master 分支的 push 事件

# 定义工作流中的任务（Jobs）
jobs:
  # 任务1：运行代码测试和代码检查（Lint）
  test:
    name: Run Lint and Test  # 任务在界面中的显示名称
    runs-on: ubuntu-latest   # 运行环境：使用 GitHub 托管的最新版 Ubuntu 虚拟机

    # 任务的具体执行步骤（按顺序执行）
    steps:
      # 步骤1：检出代码仓库到虚拟机
      - name: Checkout repo  # 步骤名称（界面显示）
        uses: actions/checkout@v3  # 使用 GitHub 官方提供的 Action，用于检出代码
        # 可选参数（示例中未显式配置）：如指定分支、深度等，默认检出当前分支最新代码

      # 步骤2：配置 Node.js 环境（项目依赖）
      - name: Setup Node
        uses: actions/setup-node@v3  # 官方 Action，用于安装指定版本的 Node.js
        with:
          # 可选：指定 Node.js 版本（如 20.x），未配置时默认使用最新 LTS 版本
          # node-version: 20

      # 步骤3：安装 pnpm 包管理器（替代 npm/yarn）
      - name: Install pnpm 
        run: npm install -g pnpm  # 通过 npm 全局安装 pnpm（更快、更高效的包管理工具）

      # 步骤4：安装项目依赖（基于 pnpm-lock.yaml 锁定版本）
      - name: Install dependencies
        run: pnpm install --frozen-lockfile  # --frozen-lockfile 强制按 lockfile 安装，避免依赖版本浮动

      # 步骤5：运行测试（如单元测试、集成测试）
      - name: Run tests
        run: npm run test  # 执行 package.json 中定义的 test 脚本（如 Jest、Vitest 等测试框架）

  # 任务2：构建文档（依赖 test 任务成功后执行）
  build:
    name: Build docs  # 任务显示名称
    runs-on: ubuntu-latest
    needs: test  # 依赖关系：必须等待 test 任务完成且成功后，才会执行此任务

    steps:
      # 步骤1：再次检出代码（每个 Job 运行在独立虚拟机中，需重新获取代码）
      - name: Checkout repo
        uses: actions/checkout@v3

      # 步骤2：配置 Node.js 环境（同 test 任务）
      - name: Setup Node
        uses: actions/setup-node@v3

      # 步骤3：安装 pnpm（同 test 任务）
      - name: Install pnpm
        run: npm install -g pnpm

      # 步骤4：安装项目依赖（同 test 任务）
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 步骤5：构建文档（如 VitePress、VuePress 生成静态网站）
      - name: Build docs
        run: npm run docs:build  # 执行 package.json 中的 docs:build 脚本，输出静态文件到指定目录（如 ./dist）

      # 步骤6：上传文档构建产物（临时存储，供 deploy 任务使用）
      - name: Upload docs
        uses: actions/upload-artifact@v4  # 官方 Action，用于存储跨 Job 的中间文件
        with:
          name: docs  # Artifact 名称（需与 deploy 任务中下载的名称一致）
          path: ./packages/docs/.vitepress/dist  # 要上传的文件路径（文档构建输出目录）

  # 任务3：部署文档到 GitHub Pages（依赖 build 任务成功后执行）
  deploy:
    name: Deploy to GitHub Pages  # 任务显示名称
    runs-on: ubuntu-latest
    needs: build  # 依赖关系：必须等待 build 任务完成且成功后执行

    steps:
      # 步骤1：下载 build 任务上传的文档产物
      - name: Download docs
        uses: actions/download-artifact@v4  # 官方 Action，用于下载之前上传的 Artifact
        with:
          name: docs  # 必须与 build 任务中 upload-artifact 的 name 一致
          # path: ./dist  # 可选：指定下载后的存储路径（未配置时默认当前目录）

      # 步骤2：部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3  # 第三方 Action（社区维护，用于部署到 GH Pages）
        with:
          github_token: ${{ secrets.GH_TOKEN }}  # 权限令牌（从仓库 Secrets 中获取，需提前配置）
          publish_dir: .  # 要部署的目录（当前目录，即下载的 docs Artifact 内容）
          # 可选：指定部署分支（默认 gh-pages）
          # publish_branch: gh-pages